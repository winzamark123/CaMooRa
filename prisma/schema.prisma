// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  clerkId String @id @unique

  profile      Profile?
  contact      Contact?
  photoAlbums  PhotoAlbum[]
  Favorites    Favorites[]  @relation("favorites")
  savedByUsers Favorites[]  @relation("favoritedBy")
}

model Favorites {
  // user = user who saved the photographer
  // photographer = user who is saved
  id             String @id @default(cuid())
  user           User   @relation("favorites", fields: [userId], references: [clerkId], onDelete: Cascade)
  userId         String
  photographer   User   @relation("favoritedBy", fields: [photographerId], references: [clerkId], onDelete: Cascade)
  photographerId String

  @@unique([userId, photographerId])
}

model Profile {
  // Identifiers
  user    User   @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  clerkId String @unique

  // Personal Information
  additionalName String?
  firstName      String
  lastName       String
  bio            String?

  // Media
  equipment    String?
  profilePic   Images? @relation(fields: [profilePicId], references: [id])
  profilePicId String
}

model Contact {
  // Indentifiers
  user    User   @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  clerkId String @unique

  // Contact Information
  email    String  @unique
  discord  String?
  phone    String?
  whatsApp String?

  instagramTitle String?
  instagramLink  String?
  portfolioTitle String?
  portfolioLink  String?

  // Preferences
  isContactPublic Boolean @default(false)
  isPhotographer  Boolean @default(false)
}

model PhotoAlbum {
  // Identifiers
  id             String   @id @default(cuid())
  user           User     @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  clerkId        String
  photoAlbumName String
  Images         Images[]
}

model Images {
  // Identifiers
  id           String      @id @default(cuid())
  PhotoAlbum   PhotoAlbum? @relation(fields: [PhotoAlbumId], references: [id], onDelete: Cascade)
  PhotoAlbumId String?
  clerkId      String

  // Image Information
  key       String
  url       String
  createdAt DateTime  @default(now())
  Profile   Profile[]
  imgWidth  Int?
  imgHeight Int?
}
